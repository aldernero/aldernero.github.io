
[{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs","type":"blog"},{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/tags/inkscape/","section":"Tags","summary":"","title":"Inkscape","type":"tags"},{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/tags/kde/","section":"Tags","summary":"","title":"Kde","type":"tags"},{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"TL;DR This short post shows you how to create an application entry for AppImage\u0026rsquo;s in KDE. This makes it easier to pin the app to the taskbar and makes sure it shows up in KDE\u0026rsquo;s application launcher.\nThe Problem # You download an application and it is in the AppImage format. You run it, then later right-click and pin it to the taskbar. However sometimes there is no icon, and when you click on it again it won\u0026rsquo;t open because it can\u0026rsquo;t find the executable. You see a notification that shows it can\u0026rsquo;t find the app in /tmp/\u0026lt;some dir\u0026gt;.\nOther times, depending on how the app is packaged and initially configured, everything works right out of the box. This post shows you how to make a launcher for AppImage\u0026rsquo;s manually.\nWhat to do # As an example I\u0026rsquo;ll work through making a launcher for Inkscape, which prefers the AppImage format for Linux. Let\u0026rsquo;s assume that I\u0026rsquo;ve downloaded the file, Inkscape-e7c3feb-x86_64_0QCD8vJ.AppImage, and put it in my ~/apps/ folder.\nOpen the app, then see where it is mounted from the terminal\nLooking at the directory, there is a logo file (org.inkscape.Inkscape.png) and a desktop file (org.inkscape.Inkscape.png).\nEvery AppImage I have looked at has a logo and desktop file, now they just need to go somewhere the system will recognize them. On Linux systems this will be in the user\u0026rsquo;s ~/.local/ directory.\nMove the logo file to ~/.local/share/logos/ and the desktop file to ~/.local/share/applications/.\nYou may need to edit the Exec= using the full path to the AppImage file. In the case of Inkscape, the default desktop file was overly complex, so I made a new one with contents\n[Desktop Entry] Version=1.0 Name=Inkscape Categories=Graphics Terminal=false Icon=org.inkscape.Inkscape Exec=/home/vernon/apps/Inkscape-e7c3feb-x86_64_0QCD8vJ.AppImage The \u0026ldquo;Categories\u0026rdquo; parameter is important as that is where the app will show up in the system menu (for me it\u0026rsquo;s KDE\u0026rsquo;s application launcher). Run the update-desktop-database command with the local applications directory for the system to recognize the changes.\nupdate-desktop-database ~/.local/share/applications Now the launcher should be visible from the runner (Alt+F2) and system menus.\nAnd that\u0026rsquo;s it. There are tools for managing AppImage installations, but I use a small enough number of them that I prefer to manage things manually.\n","date":"20 April 2025","externalUrl":null,"permalink":"/blog/kde-appimage/","section":"Blogs","summary":"","title":"Manual Desktop Entries for AppImages","type":"blog"},{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"20 April 2025","externalUrl":null,"permalink":"/","section":"Vernon's Miscellany","summary":"","title":"Vernon's Miscellany","type":"page"},{"content":"TL;DR On Hacker News today I came across an interesting blog post called Collatzeral Damage: Bitwise and Proof Foolish. It compared going through the sequence in a base-10 vs bitwise fashion. I was curious about the performance differences, so I did the comparison in both Go and Python. This post describes the results of that comparison.\nMethodology # Both of the programs for Go and Python were extremely simple, and I put them in this GitHub repo: https://github.com/aldernero/collatz-bitwise-blog-post\nThe key parts of each are below:\nGo\nfunc collatzRecursiveTraditional(n uint64) { if n \u0026lt;= 1 { return } if n%2 == 1 { collatzRecursiveTraditional(3*n + 1) } else { collatzRecursiveTraditional(n / 2) } } func collatzRecursiveBitwise(n uint64) { if n \u0026lt;= 1 { return } if (n \u0026amp; 1) == 1 { collatzRecursiveBitwise(((n \u0026lt;\u0026lt; 1) | 1) + n) } else { collatzRecursiveBitwise(n \u0026gt;\u0026gt; 1) } } Python\ndef collatz_recur_trad(n): if n == 1: return if n % 2 == 1: collatz_recur_trad(3*n + 1) else: collatz_recur_trad(n//2) def collatz_recur_bit(n): if n == 1: return if n \u0026amp; 1: collatz_recur_bit(((n \u0026gt;\u0026gt; 1) | 1) + n) else: collatz_recur_bit(n \u0026gt;\u0026gt; 1) The blog post covers a recursive approach, but in testing I also used an iterative approach. I ran all 4 combinations (traditional \u0026amp;\u0026amp; bitwise, recursive \u0026amp;\u0026amp; iterative) for both languages. I calculated the time to traverse the Collatz sequence for integers from 1 to 10 million.\nResults # The table below shows the elapsed time for all combinations.\nMethod Approach Go Python Traditional recursive 7.4s 147.2s Bitwise recursive 7.2s 29.8s Traditional iterative 2.4s 101.8s Bitwise iterative 2.4s 24.5s The results were mostly expected\niterative is faster than recursive For Go the performance was similar for bitwise and traditional approaches, but for Python bitwise is faster Golang is faster than Python (duh) I think the first point is expected since iterative is closer to what the CPU actually does to perform the calculation, and uses less memory.\nAt first I wasn\u0026rsquo;t sure what the performance difference between traditional and bitwise would be for Go, but given that it\u0026rsquo;s a compiled language I suppose all the base-10 arithmetic operations get turned into bitwise operations during compilation? \u0026#x1f937; For Python it makes sense that bitwise would be faster since it\u0026rsquo;s an interpreted language and using bitwise operations skips a step for the intepreter to do the conversion.\nFor Go we can isolate the comparison further by benchmarking the individual parts of the calcualtion:\nfunc BenchmarkCollatzOddTraditional(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { _ = 3*i + 1 } } func BenchmarkCollatzEvenTraditional(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { _ = i / 2 } } func BenchmarkCollatzOddBitwise(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { _ = ((i \u0026lt;\u0026lt; 1) | 1) + i } } func BenchmarkCollatzEvenBitwise(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { _ = i \u0026gt;\u0026gt; 1 } } Running the benchmark shows:\ngoos: linux goarch: amd64 pkg: collatzBitwise cpu: AMD Ryzen 7 3700X 8-Core Processor BenchmarkCollatzOddTraditional BenchmarkCollatzOddTraditional-16 1000000000\t0.2551 ns/op BenchmarkCollatzEvenTraditional BenchmarkCollatzEvenTraditional-16 1000000000\t0.2614 ns/op BenchmarkCollatzOddBitwise BenchmarkCollatzOddBitwise-16 1000000000\t0.2528 ns/op BenchmarkCollatzEvenBitwise BenchmarkCollatzEvenBitwise-16 1000000000\t0.2518 ns/op Summary # This was a fun little exercise. I would be interested to see comparisons for other languages, but I only had the patience to test these two. If you test some other language, let me know on one of the social platforms.\nReferences # https://news.ycombinator.com/item?id=43375353 - Hacker News article discussing the blog post Collatzeral Damage: Bitwise and Proof Foolish - blog post that inspired this post https://github.com/aldernero/collatz-bitwise-blog-post - GitHub repo with the code used in this post ","date":"15 March 2025","externalUrl":null,"permalink":"/blog/collatz-bitwise-comparison/","section":"Blogs","summary":"","title":"Collatz Bitwise Comparison","type":"blog"},{"content":"","date":"15 March 2025","externalUrl":null,"permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang","type":"tags"},{"content":"","date":"15 March 2025","externalUrl":null,"permalink":"/tags/math/","section":"Tags","summary":"","title":"Math","type":"tags"},{"content":"","date":"15 March 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/categories/development/","section":"Categories","summary":"","title":"Development","type":"categories"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/tags/generative-art/","section":"Tags","summary":"","title":"Generative Art","type":"tags"},{"content":"TL;DR Sketchy has been around for 3 years, but today marks its first official release, v0.1.0. Read below for more about the generative art framework for Go.\nWhat is Sketchy? # Sketchy is a framework for generative art, similar to Processing for Java, p5.js for JavaScript, vsketch for Python, and openFrameworks for C++. It provides a canvas and controls for quickly iterating on designs. It can save results in PNG or SVG format. The latter is what I mostly use as I typically plot my designs with my AxiDraw v3 pen plotter.\nWhen I needed to learn the Go programming language for a new job, I figured that creating something with Go that aligned with my favorite hobby (generative art) would make for quick language aquisition. As it was one of the first apps I wrote in Go, it was a little rough around the edges. Over the last few years I\u0026rsquo;ve been both improving Sketchy and using it to create most of my art. You can see all my art on my Instagram account, below are a few examples from a fractal design.\nRecently I realized that to increase adoption I ought to create a release, and spend more time on adding features and functions in a deliberate and planned way. The goal is to eventually get to a v1.0 release.\nWhat can Sketchy do? # Sketchy follows the familiar setup/update/draw pattern found in many generative art frameworks, shown below:\nThe configuration file describes things like the sketch dimensions and title, as well as controls like sliders, checkboxes, and buttons that can be referenced from code.\nIn the code itself the controls can be used like\n// get the value from a slider control sliderVal := s.Slider(\u0026#34;slider name\u0026#34;) // float64 // both checkboxes and buttons are Toggle structs toggleVal := s.Toggle(\u0026#34;checkbox/button name\u0026#34;) // bool Besides the user defined controls, there are some builtin controls that cover the random seed and saving files. The image below shows an example Control Panel\nThe github repo has more examples and a tutorial for creating a \u0026ldquo;Hello Circle\u0026rdquo; (instead of \u0026ldquo;Hello World\u0026rdquo;) project.\nWhat\u0026rsquo;s next? # I plan to add some new features in upcoming releases:\nAn install sketchy cli subcommand that would create a config file in the user\u0026rsquo;s home directory. A configuration file to store things like default colors, fonts, etc. that can be referenced in designs. Perhaps a way to design for very large outputs while showing a scaled down version while iterating. Maybe additional controls in the Control Panel like color controls. Like with any open source project, feel free to open issues in the github repo if you want to request features or run into any bugs.\nHappy Sketching!\n","date":"8 March 2025","externalUrl":null,"permalink":"/blog/introducing-sketchy/","section":"Blogs","summary":"","title":"Introducing Sketchy","type":"blog"},{"content":"","date":"8 March 2025","externalUrl":null,"permalink":"/tags/sketchy/","section":"Tags","summary":"","title":"Sketchy","type":"tags"},{"content":"This is an idea I came up with to better keep track of time spent on various activities.\nThe Problem # One of my former co-workers used to say\nThe days are long and the weeks are short.\nThis rings true in my experience. It seems like during the day I\u0026rsquo;m busy enough, but at the end of the week I look back with regret at how little I accomplished. I\u0026rsquo;m not worried about how much time was spent on urgent tasks and meaningless busy work. I get alarmed however when I consider how much time I\u0026rsquo;m not spending on the things that are meaningful to me.\nThis problem is not new for me either. In the past I\u0026rsquo;ve thought about using software to keep track of time spent on meaningful but non-urgent activities. I wanted to create something custom to fit my use case, so I started writing a TUI-based program in Go (Timebox). The project suffered from predictable scope creep, and required so much time to implement that it was a victim of the problem I\u0026rsquo;m trying to solve in the first place. I simply didn\u0026rsquo;t spend enough dedicated time on it to reach completion. The code is still a WIP, and I do hope to finish it at some point.\nThen over the holiday break a simple idea occurred to me. I have an 8oz Mason jar in my office that I use to hold pens. I thought, what if I get a bunch differently colored marbles, and transfer them from one mason jar to another to track time spent. The rest of the article describes the Time Jar system I came up with and how it worked out in practice for the first week.\nThe Idea # The key concept is that we have a finite amount of time per week. Not only are there just 168 hours, but a lot of that is already \u0026ldquo;pre-booked\u0026rdquo;. Sleep accounts for 56 hours, and work another 40. That leaves just 72 hours left.\nLet\u0026rsquo;s associate one marble with one hour. Conveniently then, a week\u0026rsquo;s worth of potential time for meaningful activities looks like the picture below, a roughly full jar of marbles. Let\u0026rsquo;s call this jar the \u0026ldquo;potential jar\u0026rdquo; Each color represents a different category of activity. The next section has a breakdown of the categories I wanted to focus on.\nA second mason jar is initially empty. Let\u0026rsquo;s call this the \u0026ldquo;realized jar\u0026rdquo; Throughout the week, after I spend an hour engaged in one of the tracked categories, I transfer a marble of the associated color from the potential jar to the realized jar. At the end of the week, hopefully the comparison between the two jars should give me some insights and feedback about how to adjust my time management.\nThe Categories # These are the categories I\u0026rsquo;m tracking. These are of course very personalized and are likely to change in the future. The marbles I bought came in six colors, so I picked six areas I\u0026rsquo;d like to spend more time on:\nArt - creating, working on my shop, learning new skills, etc Exercise - anything that gets me moving, I\u0026rsquo;ve been exceedingly sedentary since becoming a remote worker. Writing - anything really, stories, poems, or blog posts like this. Mindfulness - meditation, therapy, anything else that promotes better mental health Coding - coding projects that are not directly related to my generative art Music - I want to learn guitar and relearn the piano As an example of how terrible I am at spending time on these, let\u0026rsquo;s look at the last two. The time tracking app I mentioned earlier, Timebox, was initially created in August of 2022 and hasn\u0026rsquo;t had an update since March of 2024. There are plenty of other full-stack side projects in various states of incompleteness. On the music front, I\u0026rsquo;ve had a guitar for over a decade that I don\u0026rsquo;t how to play, and a digital piano I haven\u0026rsquo;t touched since I bought it a year or two ago.\nReflections # Even before starting the week, I realized something important. There should be no expectation that 100% of the marbles are transferred by the end of the week. There are so many things we have do that eat into the potential hours. Running errands, cooking, cleaning, hygiene, and simply transitioning from one activity on another take time that can really add up. In addition, there are lots of things I like to do but aren\u0026rsquo;t in any of the six categories because they are not things that help me develop or grow. For example I love video games and TV, and making time for them is good, but there should be limits. In fact, spending a certain amount of time enjoying those things would make for a good reward system to keep myself motivated to continue this practice. For example for each hour earned in the Time Jar, I could bank 30 minutes of time to spend watching TV.\nAnyway, getting to the results for the week, here is how the two jars looked\nThe table below shows the breakdown by category.\nCategory Hours art 4 exercise 6 mindfullness 2 coding 5 music 1 Total 18 In all, I spent 18 hours on meaningful activities. Since the potential maximum is 72 hours, this represents a 25% efficiency. It\u0026rsquo;s a low number, but at least it gives me a baseline to measure improvements against. What is the upper limit of efficiency? I have no clue, but I imagine doing better than 75% would be nearly impossible. We will see.\nAn additional insight arose towards the end of the week. As I was spending more time in some categories compared to others, the marbles on top tended to be for the less consumed categories. I needed to dig deeper to find the right color marble to transfer. It was almost like the jar was telling me to diversify my time more.\nWhat\u0026rsquo;s Next # I\u0026rsquo;m pleased with the way the first week went. Although I had a low efficiency (25%) I was surprised by how motivated I was to engage with these meaningful activities so I could transfer a marble and watch them fill up the realized jar. I will continue this practice, with the goal of improving my efficiency in this new week. I also plan to try something similar to track things at work, with 40-50 marbles in 2 separate jars. I\u0026rsquo;ll periodically post updates on my progress and how the practice has (hopefully) improved how I spend my time.\n","date":"29 January 2025","externalUrl":null,"permalink":"/blog/time-jars/","section":"Blogs","summary":"","title":"Time Jars","type":"blog"},{"content":"","date":"29 January 2025","externalUrl":null,"permalink":"/categories/time-management/","section":"Categories","summary":"","title":"Time Management","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]